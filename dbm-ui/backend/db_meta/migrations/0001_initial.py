# Generated by Django 3.2.4 on 2023-04-18 11:32

import django.db.models.deletion
from django.db import migrations, models

import backend.db_meta.models.instance
from backend.configuration.constants import DBType
from backend.db_meta.enums import (
    AccessLayer,
    ClusterEntryType,
    ClusterPhase,
    ClusterStatus,
    ClusterType,
    InstanceInnerRole,
    InstancePhase,
    InstanceRole,
    MachineType,
)


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="App",
            fields=[
                ("creator", models.CharField(max_length=64, verbose_name="创建人")),
                ("create_at", models.DateTimeField(auto_now_add=True, verbose_name="创建时间")),
                ("updater", models.CharField(max_length=64, verbose_name="修改人")),
                ("update_at", models.DateTimeField(auto_now=True, verbose_name="更新时间")),
                ("bk_biz_id", models.IntegerField(help_text="业务的 cmdb id", primary_key=True, serialize=False)),
                (
                    "bk_set_id",
                    models.IntegerField(default=0, help_text="业务需要在 dba 业务下新增一个 set, 需要记录下这个 set id", unique=True),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="AppCache",
            fields=[
                ("creator", models.CharField(max_length=64, verbose_name="创建人")),
                ("create_at", models.DateTimeField(auto_now_add=True, verbose_name="创建时间")),
                ("updater", models.CharField(max_length=64, verbose_name="修改人")),
                ("update_at", models.DateTimeField(auto_now=True, verbose_name="更新时间")),
                ("bk_biz_id", models.IntegerField(help_text="业务ID", primary_key=True, serialize=False)),
                ("db_app_abbr", models.CharField(default="", max_length=128, verbose_name="业务英文名")),
                ("bk_biz_name", models.CharField(default="", max_length=128, verbose_name="业务中文名")),
                ("language", models.CharField(default="", max_length=64, verbose_name="语言")),
                ("time_zone", models.CharField(default="", max_length=64, verbose_name="时区")),
                ("bk_biz_maintainer", models.CharField(default="", max_length=512, verbose_name="运维人员")),
            ],
            options={
                "verbose_name": "CMDB业务信息缓存表",
                "verbose_name_plural": "CMDB业务信息缓存表",
            },
        ),
        migrations.CreateModel(
            name="AppMonitorTopo",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("creator", models.CharField(max_length=64, verbose_name="创建人")),
                ("create_at", models.DateTimeField(auto_now_add=True, verbose_name="创建时间")),
                ("updater", models.CharField(max_length=64, verbose_name="修改人")),
                ("update_at", models.DateTimeField(auto_now=True, verbose_name="更新时间")),
                ("bk_biz_id", models.IntegerField(default=0)),
                (
                    "db_type",
                    models.CharField(
                        choices=DBType.get_choices(),
                        default="",
                        max_length=64,
                    ),
                ),
                (
                    "machine_type",
                    models.CharField(
                        choices=MachineType.get_choices(),
                        default="",
                        max_length=64,
                    ),
                ),
                ("monitor_plugin", models.CharField(default="", max_length=64)),
                ("monitor_plugin_id", models.CharField(default="", max_length=128)),
                ("bk_set_id", models.BigIntegerField(default=0)),
                ("bk_set_name", models.CharField(default="", max_length=64)),
            ],
            options={
                "verbose_name": "业务监控拓扑",
                "verbose_name_plural": "业务监控拓扑",
            },
        ),
        migrations.CreateModel(
            name="BKCity",
            fields=[
                ("creator", models.CharField(max_length=64, verbose_name="创建人")),
                ("create_at", models.DateTimeField(auto_now_add=True, verbose_name="创建时间")),
                ("updater", models.CharField(max_length=64, verbose_name="修改人")),
                ("update_at", models.DateTimeField(auto_now=True, verbose_name="更新时间")),
                ("bk_idc_city_id", models.IntegerField(default=0, primary_key=True, serialize=False)),
                ("bk_idc_city_name", models.CharField(default="", help_text="IDC 城市名", max_length=128, unique=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="BKModule",
            fields=[
                ("creator", models.CharField(max_length=64, verbose_name="创建人")),
                ("create_at", models.DateTimeField(auto_now_add=True, verbose_name="创建时间")),
                ("updater", models.CharField(max_length=64, verbose_name="修改人")),
                ("update_at", models.DateTimeField(auto_now=True, verbose_name="更新时间")),
                ("bk_module_id", models.IntegerField(primary_key=True, serialize=False)),
                ("db_module_id", models.BigIntegerField(default=0)),
                (
                    "machine_type",
                    models.CharField(
                        choices=MachineType.get_choices(),
                        default="",
                        max_length=64,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Cluster",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("creator", models.CharField(max_length=64, verbose_name="创建人")),
                ("create_at", models.DateTimeField(auto_now_add=True, verbose_name="创建时间")),
                ("updater", models.CharField(max_length=64, verbose_name="修改人")),
                ("update_at", models.DateTimeField(auto_now=True, verbose_name="更新时间")),
                ("name", models.CharField(default="", help_text="集群英文名", max_length=64)),
                ("alias", models.CharField(default="", help_text="集群别名", max_length=64)),
                ("bk_biz_id", models.IntegerField(default=0)),
                (
                    "cluster_type",
                    models.CharField(
                        choices=ClusterType.get_choices(),
                        default="",
                        max_length=64,
                    ),
                ),
                ("db_module_id", models.BigIntegerField(default=0)),
                ("immute_domain", models.CharField(db_index=True, default="", max_length=200)),
                ("major_version", models.CharField(default="", help_text="主版本号", max_length=64)),
                (
                    "phase",
                    models.CharField(
                        choices=ClusterPhase.get_choices(),
                        default="online",
                        max_length=64,
                    ),
                ),
                (
                    "status",
                    models.CharField(choices=ClusterStatus.get_choices(), default="normal", max_length=64),
                ),
                ("bk_cloud_id", models.IntegerField(default=0, help_text="云区域 ID")),
                ("region", models.CharField(default="", help_text="地域", max_length=128)),
                ("time_zone", models.CharField(default="+08:00", help_text="集群所在的时区", max_length=16)),
            ],
            options={
                "unique_together": {("bk_biz_id", "name", "cluster_type", "db_module_id")},
            },
        ),
        migrations.CreateModel(
            name="ClusterEntry",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("creator", models.CharField(max_length=64, verbose_name="创建人")),
                ("create_at", models.DateTimeField(auto_now_add=True, verbose_name="创建时间")),
                ("updater", models.CharField(max_length=64, verbose_name="修改人")),
                ("update_at", models.DateTimeField(auto_now=True, verbose_name="更新时间")),
                (
                    "cluster_entry_type",
                    models.CharField(choices=ClusterEntryType.get_choices(), default="", max_length=64),
                ),
                ("entry", models.CharField(default="", max_length=200, unique=True)),
                ("cluster", models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to="db_meta.cluster")),
            ],
            options={
                "unique_together": {("cluster_entry_type", "entry")},
            },
        ),
        migrations.CreateModel(
            name="ClusterMonitorTopo",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("creator", models.CharField(max_length=64, verbose_name="创建人")),
                ("create_at", models.DateTimeField(auto_now_add=True, verbose_name="创建时间")),
                ("updater", models.CharField(max_length=64, verbose_name="修改人")),
                ("update_at", models.DateTimeField(auto_now=True, verbose_name="更新时间")),
                ("bk_biz_id", models.IntegerField(default=0)),
                ("cluster_id", models.BigIntegerField(default=0)),
                ("instance_id", models.BigIntegerField(default=0, help_text="实例ID，兼容单实例存储组件influxdb")),
                ("bk_set_id", models.BigIntegerField(default=0)),
                ("bk_module_id", models.BigIntegerField(default=0)),
                (
                    "machine_type",
                    models.CharField(
                        choices=MachineType.get_choices(),
                        default="",
                        max_length=64,
                    ),
                ),
            ],
            options={
                "verbose_name": "CMDB模块映射",
                "verbose_name_plural": "CMDB模块映射",
            },
        ),
        migrations.CreateModel(
            name="GroupInstance",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("creator", models.CharField(max_length=64, verbose_name="创建人")),
                ("create_at", models.DateTimeField(auto_now_add=True, verbose_name="创建时间")),
                ("updater", models.CharField(max_length=64, verbose_name="修改人")),
                ("update_at", models.DateTimeField(auto_now=True, verbose_name="更新时间")),
                ("group_id", models.BigIntegerField(help_text="分组ID")),
                ("instance_id", models.BigIntegerField(help_text="实例ID")),
            ],
            options={
                "verbose_name": "分组和实例关系绑定表",
                "verbose_name_plural": "分组和实例关系绑定表",
            },
        ),
        migrations.CreateModel(
            name="LogicalCity",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("creator", models.CharField(max_length=64, verbose_name="创建人")),
                ("create_at", models.DateTimeField(auto_now_add=True, verbose_name="创建时间")),
                ("updater", models.CharField(max_length=64, verbose_name="修改人")),
                ("update_at", models.DateTimeField(auto_now=True, verbose_name="更新时间")),
                ("name", models.CharField(default="", max_length=128, unique=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Machine",
            fields=[
                ("creator", models.CharField(max_length=64, verbose_name="创建人")),
                ("create_at", models.DateTimeField(auto_now_add=True, verbose_name="创建时间")),
                ("updater", models.CharField(max_length=64, verbose_name="修改人")),
                ("update_at", models.DateTimeField(auto_now=True, verbose_name="更新时间")),
                ("ip", models.GenericIPAddressField(default="", help_text="IP 地址")),
                ("bk_biz_id", models.IntegerField(default=0)),
                ("db_module_id", models.IntegerField(default=0)),
                (
                    "access_layer",
                    models.CharField(
                        choices=AccessLayer.get_choices(),
                        default="",
                        max_length=64,
                    ),
                ),
                (
                    "machine_type",
                    models.CharField(
                        choices=MachineType.get_choices(),
                        default="",
                        max_length=64,
                    ),
                ),
                (
                    "cluster_type",
                    models.CharField(
                        choices=ClusterType.get_choices(),
                        default="",
                        max_length=64,
                    ),
                ),
                ("bk_host_id", models.PositiveBigIntegerField(default=0, primary_key=True, serialize=False)),
                ("bk_os_name", models.CharField(default="", help_text="操作系统", max_length=128)),
                ("bk_idc_area", models.CharField(default="", help_text="区域", max_length=128)),
                ("bk_idc_area_id", models.IntegerField(default=0, help_text="区域 ID")),
                ("bk_sub_zone", models.CharField(default="", help_text="子 Zone", max_length=128)),
                ("bk_sub_zone_id", models.IntegerField(default=0, help_text="子 Zone ID")),
                ("bk_rack", models.CharField(default="", help_text="机架", max_length=128)),
                ("bk_rack_id", models.IntegerField(default=0, help_text="机架 ID")),
                ("bk_svr_device_cls_name", models.CharField(default="", help_text="标准设备类型", max_length=128)),
                ("bk_idc_name", models.CharField(default="", help_text="机房", max_length=128)),
                ("bk_idc_id", models.IntegerField(default=0, help_text="机房 ID")),
                ("bk_cloud_id", models.IntegerField(default=0, help_text="云区域 ID")),
                ("net_device_id", models.CharField(default="", max_length=256)),
                ("bk_city", models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to="db_meta.bkcity")),
            ],
            options={
                "unique_together": {("ip", "bk_cloud_id")},
            },
        ),
        migrations.CreateModel(
            name="StorageInstance",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("creator", models.CharField(max_length=64, verbose_name="创建人")),
                ("create_at", models.DateTimeField(auto_now_add=True, verbose_name="创建时间")),
                ("updater", models.CharField(max_length=64, verbose_name="修改人")),
                ("update_at", models.DateTimeField(auto_now=True, verbose_name="更新时间")),
                ("version", models.CharField(default="", help_text="版本号", max_length=64)),
                ("port", models.PositiveIntegerField(default=0)),
                ("db_module_id", models.IntegerField(default=0)),
                ("bk_biz_id", models.IntegerField(default=0)),
                (
                    "access_layer",
                    models.CharField(
                        choices=AccessLayer.get_choices(),
                        default="",
                        max_length=64,
                    ),
                ),
                (
                    "machine_type",
                    models.CharField(
                        choices=MachineType.get_choices(),
                        default="",
                        max_length=64,
                    ),
                ),
                (
                    "instance_role",
                    models.CharField(
                        choices=InstanceRole.get_choices(),
                        default="",
                        max_length=64,
                    ),
                ),
                (
                    "instance_inner_role",
                    models.CharField(
                        choices=InstanceInnerRole.get_choices(),
                        default="",
                        max_length=64,
                    ),
                ),
                (
                    "cluster_type",
                    models.CharField(
                        choices=ClusterType.get_choices(),
                        default="",
                        max_length=64,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=ClusterStatus.get_choices(),
                        default="",
                        max_length=64,
                    ),
                ),
                (
                    "phase",
                    models.CharField(
                        choices=InstancePhase.get_choices(),
                        default="online",
                        max_length=64,
                    ),
                ),
                ("name", models.CharField(default="", max_length=255)),
                ("time_zone", models.CharField(default="+08:00", help_text="实例所在的时区", max_length=16)),
                ("bk_instance_id", models.BigIntegerField(default=0, help_text="对应在cc的服务实例的id")),
                ("bind_entry", models.ManyToManyField(blank=True, to="db_meta.ClusterEntry")),
                ("cluster", models.ManyToManyField(blank=True, to="db_meta.Cluster")),
                ("machine", models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to="db_meta.machine")),
            ],
            options={
                "ordering": ("-create_at",),
                "unique_together": {("machine", "port")},
            },
            bases=(backend.db_meta.models.instance.InstanceMixin, models.Model),
        ),
        migrations.CreateModel(
            name="SyncFailedMachine",
            fields=[
                ("creator", models.CharField(max_length=64, verbose_name="创建人")),
                ("create_at", models.DateTimeField(auto_now_add=True, verbose_name="创建时间")),
                ("updater", models.CharField(max_length=64, verbose_name="修改人")),
                ("update_at", models.DateTimeField(auto_now=True, verbose_name="更新时间")),
                ("bk_host_id", models.PositiveBigIntegerField(default=0, primary_key=True, serialize=False)),
                ("error", models.CharField(max_length=1000)),
            ],
            options={
                "verbose_name": "同步失败的IP",
                "verbose_name_plural": "同步失败的IP",
            },
        ),
        migrations.CreateModel(
            name="Tag",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("creator", models.CharField(max_length=64, verbose_name="创建人")),
                ("create_at", models.DateTimeField(auto_now_add=True, verbose_name="创建时间")),
                ("updater", models.CharField(max_length=64, verbose_name="修改人")),
                ("update_at", models.DateTimeField(auto_now=True, verbose_name="更新时间")),
                ("bk_biz_id", models.IntegerField(default=0)),
                ("name", models.CharField(default="", max_length=64)),
            ],
            options={
                "unique_together": {("bk_biz_id", "name")},
            },
        ),
        migrations.CreateModel(
            name="PolarisEntryDetail",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("creator", models.CharField(max_length=64, verbose_name="创建人")),
                ("create_at", models.DateTimeField(auto_now_add=True, verbose_name="创建时间")),
                ("updater", models.CharField(max_length=64, verbose_name="修改人")),
                ("update_at", models.DateTimeField(auto_now=True, verbose_name="更新时间")),
                ("polaris_name", models.CharField(default="", max_length=50, unique=True)),
                ("polaris_l5", models.CharField(default="", max_length=30)),
                ("polaris_token", models.CharField(default="", max_length=50)),
                ("alias_token", models.CharField(default="", max_length=50)),
                ("entry", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="db_meta.clusterentry")),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Group",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("creator", models.CharField(max_length=64, verbose_name="创建人")),
                ("create_at", models.DateTimeField(auto_now_add=True, verbose_name="创建时间")),
                ("updater", models.CharField(max_length=64, verbose_name="修改人")),
                ("update_at", models.DateTimeField(auto_now=True, verbose_name="更新时间")),
                ("bk_biz_id", models.IntegerField(help_text="业务ID")),
                ("name", models.CharField(max_length=64, verbose_name="分组名")),
            ],
            options={
                "verbose_name": "分组表",
                "verbose_name_plural": "分组表",
                "unique_together": {("bk_biz_id", "name")},
            },
        ),
        migrations.CreateModel(
            name="DBModule",
            fields=[
                ("creator", models.CharField(max_length=64, verbose_name="创建人")),
                ("create_at", models.DateTimeField(auto_now_add=True, verbose_name="创建时间")),
                ("updater", models.CharField(max_length=64, verbose_name="修改人")),
                ("update_at", models.DateTimeField(auto_now=True, verbose_name="更新时间")),
                ("bk_biz_id", models.IntegerField(default=0)),
                ("db_module_name", models.CharField(default="", max_length=200)),
                ("db_module_id", models.BigAutoField(primary_key=True, serialize=False)),
                (
                    "cluster_type",
                    models.CharField(choices=ClusterEntryType.get_choices(), default="", max_length=64),
                ),
            ],
            options={
                "unique_together": {
                    ("db_module_name", "bk_biz_id", "cluster_type"),
                    ("db_module_id", "bk_biz_id", "cluster_type"),
                },
            },
        ),
        migrations.CreateModel(
            name="CLBEntryDetail",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("creator", models.CharField(max_length=64, verbose_name="创建人")),
                ("create_at", models.DateTimeField(auto_now_add=True, verbose_name="创建时间")),
                ("updater", models.CharField(max_length=64, verbose_name="修改人")),
                ("update_at", models.DateTimeField(auto_now=True, verbose_name="更新时间")),
                ("clb_ip", models.CharField(default="", max_length=30, unique=True)),
                ("clb_id", models.CharField(default="", max_length=30)),
                ("listener_id", models.CharField(default="", max_length=30)),
                ("clb_region", models.CharField(default="", max_length=50)),
                ("entry", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="db_meta.clusterentry")),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="bkcity",
            name="logical_city",
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to="db_meta.logicalcity"),
        ),
        migrations.CreateModel(
            name="StorageSetDtl",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("creator", models.CharField(max_length=64, verbose_name="创建人")),
                ("create_at", models.DateTimeField(auto_now_add=True, verbose_name="创建时间")),
                ("updater", models.CharField(max_length=64, verbose_name="修改人")),
                ("update_at", models.DateTimeField(auto_now=True, verbose_name="更新时间")),
                ("bk_biz_id", models.IntegerField(default=0)),
                ("seg_range", models.CharField(default="", max_length=150)),
                ("cluster", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="db_meta.cluster")),
                (
                    "instance",
                    models.ForeignKey(
                        db_column="instance", on_delete=django.db.models.deletion.CASCADE, to="db_meta.storageinstance"
                    ),
                ),
            ],
            options={
                "unique_together": {("instance", "cluster", "bk_biz_id")},
            },
        ),
        migrations.CreateModel(
            name="StorageInstanceTuple",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("creator", models.CharField(max_length=64, verbose_name="创建人")),
                ("create_at", models.DateTimeField(auto_now_add=True, verbose_name="创建时间")),
                ("updater", models.CharField(max_length=64, verbose_name="修改人")),
                ("update_at", models.DateTimeField(auto_now=True, verbose_name="更新时间")),
                (
                    "ejector",
                    models.ForeignKey(
                        db_column="ejector",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="as_ejector",
                        to="db_meta.storageinstance",
                    ),
                ),
                (
                    "receiver",
                    models.ForeignKey(
                        db_column="receiver",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="as_receiver",
                        to="db_meta.storageinstance",
                    ),
                ),
            ],
            options={
                "unique_together": {("ejector", "receiver")},
            },
        ),
        migrations.CreateModel(
            name="ProxyInstance",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("creator", models.CharField(max_length=64, verbose_name="创建人")),
                ("create_at", models.DateTimeField(auto_now_add=True, verbose_name="创建时间")),
                ("updater", models.CharField(max_length=64, verbose_name="修改人")),
                ("update_at", models.DateTimeField(auto_now=True, verbose_name="更新时间")),
                ("version", models.CharField(default="", help_text="版本号", max_length=64)),
                ("port", models.PositiveIntegerField(default=0)),
                ("admin_port", models.PositiveIntegerField(default=0)),
                ("db_module_id", models.IntegerField(default=0)),
                ("bk_biz_id", models.IntegerField(default=0)),
                (
                    "access_layer",
                    models.CharField(
                        choices=AccessLayer.get_choices(),
                        default="",
                        max_length=64,
                    ),
                ),
                (
                    "machine_type",
                    models.CharField(
                        choices=MachineType.get_choices(),
                        default="",
                        max_length=64,
                    ),
                ),
                (
                    "cluster_type",
                    models.CharField(
                        choices=ClusterType.get_choices(),
                        default="",
                        max_length=64,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=ClusterStatus.get_choices(),
                        default="",
                        max_length=64,
                    ),
                ),
                ("name", models.CharField(default="", max_length=255)),
                ("time_zone", models.CharField(default="+08:00", help_text="实例所在的时区", max_length=16)),
                ("bk_instance_id", models.BigIntegerField(default=0, help_text="对应在cc的服务实例的id")),
                ("bind_entry", models.ManyToManyField(blank=True, to="db_meta.ClusterEntry")),
                ("cluster", models.ManyToManyField(blank=True, to="db_meta.Cluster")),
                ("machine", models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to="db_meta.machine")),
                ("storageinstance", models.ManyToManyField(blank=True, to="db_meta.StorageInstance")),
            ],
            options={
                "ordering": ("-create_at",),
                "unique_together": {("machine", "port")},
            },
            bases=(backend.db_meta.models.instance.InstanceMixin, models.Model),
        ),
    ]
