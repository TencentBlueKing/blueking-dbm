# -*- coding: utf-8 -*-
"""
TencentBlueKing is pleased to support the open source community by making 蓝鲸智云-DB管理系统(BlueKing-BK-DBM) available.
Copyright (C) 2017-2023 THL A29 Limited, a Tencent company. All rights reserved.
Licensed under the MIT License (the "License"); you may not use this file except in compliance with the License.
You may obtain a copy of the License at https://opensource.org/licenses/MIT
Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
specific language governing permissions and limitations under the License.
"""

# Generated by Django 3.2.4 on 2023-05-29 07:30

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="TbDtsServerBlacklist",
            fields=[
                (
                    "ip",
                    models.CharField(
                        default="",
                        max_length=64,
                        primary_key=True,
                        serialize=False,
                        verbose_name="dts_server ip in the blacklist",
                    ),
                ),
            ],
            options={
                "db_table": "tb_tendis_dts_server_blacklist",
            },
        ),
        migrations.CreateModel(
            name="TbTendisDtsDistributeLock",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("lock_key", models.CharField(max_length=255, unique=True, verbose_name="锁的唯一标识")),
                ("holder", models.CharField(max_length=128, verbose_name="锁的持有者")),
                ("creation_time", models.DateTimeField(auto_now_add=True, verbose_name="创建时间")),
                ("lock_expire_time", models.DateTimeField(verbose_name="锁的过期时间")),
            ],
            options={
                "db_table": "tb_tendis_dts_distribute_lock",
            },
        ),
        migrations.CreateModel(
            name="TbTendisDTSJob",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("bill_id", models.BigIntegerField(db_index=True, default=0, verbose_name="单据号")),
                ("app", models.CharField(default="", max_length=64, verbose_name="业务bk_biz_id")),
                ("bk_cloud_id", models.BigIntegerField(default=0, verbose_name="云区域id")),
                ("user", models.CharField(default="", max_length=64, verbose_name="申请人")),
                ("dts_bill_type", models.CharField(default="", max_length=64, verbose_name="DTS单据类型")),
                ("dts_copy_type", models.CharField(default="", max_length=64, verbose_name="DTS数据复制类型")),
                ("online_switch_type", models.CharField(default="", max_length=64, verbose_name="在线切换类型")),
                ("datacheck", models.IntegerField(default=0, verbose_name="是否数据校验")),
                ("datarepair", models.IntegerField(default=0, verbose_name="是否数据修复")),
                ("datarepair_mode", models.CharField(default="", max_length=64, verbose_name="数据修复模式")),
                ("src_cluster", models.CharField(default="", max_length=128, verbose_name="源集群")),
                ("src_cluster_type", models.CharField(default="", max_length=64, verbose_name="源集群类型")),
                ("src_rollback_bill_id", models.BigIntegerField(default=0, verbose_name="回滚单据号")),
                ("src_rollback_instances", models.BinaryField(default=b"", max_length=128, verbose_name="回滚临时环境实例")),
                ("dst_bk_biz_id", models.CharField(default="", max_length=64, verbose_name="目标业务id")),
                ("dst_cluster", models.CharField(default="", max_length=128, verbose_name="目的集群")),
                ("dst_cluster_type", models.CharField(default="", max_length=64, verbose_name="目标集群类型")),
                ("key_white_regex", models.BinaryField(default=b"", verbose_name="key正则(包含key)")),
                ("key_black_regex", models.BinaryField(default=b"", verbose_name="key正则(排除key)")),
                ("status", models.IntegerField(db_index=True, default=0, verbose_name="任务状态")),
                ("reason", models.BinaryField(default=b"", verbose_name="bill备注")),
                ("create_time", models.DateTimeField(auto_now_add=True, db_index=True, verbose_name="创建时间")),
                ("update_time", models.DateTimeField(auto_now=True, verbose_name="更新时间")),
            ],
            options={
                "verbose_name": "tb_tendis_dts_job",
                "verbose_name_plural": "tb_tendis_dts_job",
                "db_table": "tb_tendis_dts_job",
            },
        ),
        migrations.CreateModel(
            name="TbTendisDtsTask",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("bill_id", models.BigIntegerField(verbose_name="单据号")),
                ("user", models.CharField(default="", max_length=64, verbose_name="申请人")),
                ("app", models.CharField(default="", max_length=64, verbose_name="业务bk_biz_id")),
                ("bk_cloud_id", models.BigIntegerField(default=0, verbose_name="云区域id")),
                ("dts_server", models.CharField(default="", max_length=128, verbose_name="执行迁移任务的dts_server")),
                ("src_cluster", models.CharField(default="", max_length=128, verbose_name="源集群")),
                ("src_cluster_priority", models.IntegerField(default=0, verbose_name="源集群优先级,值越大,优先级越高")),
                ("src_ip", models.CharField(default="", max_length=128, verbose_name="源slave_ip")),
                ("src_port", models.IntegerField(default=0, verbose_name="源slave_port")),
                ("src_password", models.CharField(default="", max_length=128, verbose_name="源实例密码base64值")),
                ("src_dbtype", models.CharField(default="", max_length=128, verbose_name="源slave db类型")),
                ("src_dbsize", models.BigIntegerField(default=0, verbose_name="源实例数据量大小,单位Byte")),
                ("src_seg_start", models.IntegerField(default=0, verbose_name="源实例所属segment_start")),
                ("src_seg_end", models.IntegerField(default=0, verbose_name="源实例所属segment_end")),
                ("src_weight", models.IntegerField(default=0, verbose_name="源实例权重")),
                ("src_ip_concurrency_limit", models.IntegerField(default=0, verbose_name="源slave_ip上task并发数控制")),
                ("src_ip_zonename", models.CharField(default="", max_length=128, verbose_name="源实例所在城市")),
                ("src_old_logcount", models.BigIntegerField(default=0, verbose_name="源实例slave-keep-log-count的旧值")),
                ("src_new_logcount", models.BigIntegerField(default=0, verbose_name="源实例slave-keep-log-count的新值")),
                (
                    "is_src_logcount_restored",
                    models.IntegerField(default=0, verbose_name="源实例slave-keep-log-count是否恢复"),
                ),
                ("src_have_list_keys", models.IntegerField(default=0, verbose_name="srcRedis是否包含list类型key")),
                ("key_white_regex", models.BinaryField(default=b"", verbose_name="包含key(正则)")),
                ("key_black_regex", models.BinaryField(default=b"", verbose_name="排除key(正则)")),
                ("src_kvstore_id", models.IntegerField(default=0, verbose_name="tendisplus kvstore id")),
                ("dst_cluster", models.CharField(default="", max_length=128, verbose_name="目的集群")),
                ("dst_password", models.CharField(default="", max_length=128, verbose_name="目的密码base64值")),
                ("task_type", models.CharField(default="", max_length=128, verbose_name="task类型")),
                (
                    "tendisbackup_file",
                    models.CharField(default="", max_length=512, verbose_name="tendisssd slave上bakup文件位置"),
                ),
                ("fetch_file", models.CharField(default="", max_length=512, verbose_name="backup文件拉取到dts_server本地位置")),
                ("sqlfile_dir", models.CharField(default="", max_length=512, verbose_name="tendisdumper得到的sql文件夹")),
                ("syncer_port", models.IntegerField(default=0, verbose_name="redis-sync端口")),
                ("syncer_pid", models.IntegerField(default=0, verbose_name="sync的进程id")),
                ("tendis_binlog_lag", models.BigIntegerField(default=0, verbose_name="redis-sync tendis_binlog_lag")),
                ("retry_times", models.IntegerField(default=0, verbose_name="task重试次数")),
                ("sync_operate", models.CharField(default="", max_length=64, verbose_name="sync操作")),
                ("kill_syncer", models.IntegerField(default=0, verbose_name="杀死syncer")),
                ("status", models.IntegerField(default=0, verbose_name="任务状态")),
                ("message", models.BinaryField(default=b"", verbose_name="信息")),
                ("ignore_errlist", models.CharField(default="", max_length=512, verbose_name="被忽略的错误")),
                ("resync_from_time", models.DateTimeField(blank=True, null=True, verbose_name="sync从该时间点重新同步")),
                ("create_time", models.DateTimeField(auto_now_add=True, verbose_name="创建时间")),
                ("update_time", models.DateTimeField(auto_now=True, verbose_name="更新时间")),
            ],
            options={
                "verbose_name": "Tendis Dts task",
                "verbose_name_plural": "Tendis Dts task",
                "db_table": "tb_tendis_dts_task",
            },
        ),
        migrations.AddIndex(
            model_name="tbtendisdtstask",
            index=models.Index(fields=["update_time"], name="idx_update_time"),
        ),
        migrations.AddIndex(
            model_name="tbtendisdtstask",
            index=models.Index(fields=["dts_server", "update_time"], name="idx_jobserver_updatetime"),
        ),
        migrations.AddIndex(
            model_name="tbtendisdtstask",
            index=models.Index(fields=["bill_id", "src_cluster", "dst_cluster"], name="idx_billid_clusters"),
        ),
        migrations.AddIndex(
            model_name="tbtendisdtsdistributelock",
            index=models.Index(fields=["lock_key"], name="tb_tendis_d_lock_ke_fa95b7_idx"),
        ),
    ]
