# Generated by Django 3.2.19 on 2023-10-08 01:56
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="MetaCheckReport",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("creator", models.CharField(max_length=64, verbose_name="创建人")),
                ("create_at", models.DateTimeField(auto_now_add=True, verbose_name="创建时间")),
                ("updater", models.CharField(max_length=64, verbose_name="修改人")),
                ("update_at", models.DateTimeField(auto_now=True, verbose_name="更新时间")),
                ("bk_biz_id", models.IntegerField(default=0, help_text="业务的 cmdb id")),
                ("bk_cloud_id", models.IntegerField(default=0, help_text="云区域 id")),
                ("status", models.BooleanField(default=True, help_text="巡检结果状态, 默认正常")),
                ("msg", models.TextField(default="", help_text="备注信息")),
                ("ip", models.GenericIPAddressField(default="")),
                ("port", models.PositiveIntegerField(default=0)),
                ("cluster", models.CharField(default="", max_length=255)),
                (
                    "cluster_type",
                    models.CharField(
                        choices=[
                            ("tendbsingle", "tendbsingle"),
                            ("tendbha", "tendbha"),
                            ("tendbcluster", "tendbcluster"),
                            ("redis", "Redis集群"),
                            ("PredixyRedisCluster", "Redis集群"),
                            ("PredixyTendisplusCluster", "Tendisplus存储版集群"),
                            ("TwemproxyRedisInstance", "TendisCache集群"),
                            ("TwemproxyTendisSSDInstance", "TendisSSD集群"),
                            ("TwemproxyTendisplusInstance", "Tendis存储版集群"),
                            ("RedisInstance", "RedisCache主从版"),
                            ("TendisSSDInstance", "TendisSSD主从版"),
                            ("TendisplusInstance", "Tendisplus主从版"),
                            ("RedisCluster", "RedisCluster集群"),
                            ("TendisplusCluster", "TendisplusCluster集群"),
                            ("TendisplusInstance", "Tendisplus存储版集群 GetTendisType 获取redis类型值"),
                            ("RedisInstance", "TendisCache集群 GetTendisType 获取redis类型值"),
                            ("TendisSSDInstance", "TendisSSD集群 GetTendisType 获取redis类型值"),
                            ("es", "ES集群"),
                            ("kafka", "Kafka集群"),
                            ("hdfs", "Hdfs集群"),
                            ("influxdb", "Influxdb实例"),
                            ("pulsar", "Pulsar集群"),
                            ("MongoReplicaSet", "Mongo副本集"),
                            ("MongoShardedCluster", "Mongo分片集群"),
                            ("riak", "Riak集群"),
                        ],
                        default="",
                        max_length=64,
                    ),
                ),
                (
                    "machine_type",
                    models.CharField(
                        choices=[
                            ("spider", "spider"),
                            ("remote", "remote"),
                            ("proxy", "proxy"),
                            ("backend", "backend"),
                            ("single", "single"),
                            ("predixy", "predixy"),
                            ("twemproxy", "twemproxy"),
                            ("redis", "redis"),
                            ("tendiscache", "tendiscache"),
                            ("tendisssd", "tendisssd"),
                            ("tendisplus", "tendisplus"),
                            ("es_datanode", "es_datanode"),
                            ("es_master", "es_master"),
                            ("es_client", "es_client"),
                            ("broker", "broker"),
                            ("zookeeper", "zookeeper"),
                            ("hdfs_master", "hdfs_master"),
                            ("hdfs_datanode", "hdfs_datanode"),
                            ("mongos", "mongos"),
                            ("mongodb", "mongodb"),
                            ("mongo_config", "mongo_config"),
                            ("influxdb", "influxdb"),
                            ("pulsar_zookeeper", "pulsar_zookeeper"),
                            ("pulsar_bookkeeper", "pulsar_bookkeeper"),
                            ("pulsar_broker", "pulsar_broker"),
                            ("riak", "riak"),
                        ],
                        default="",
                        max_length=64,
                    ),
                ),
                (
                    "subtype",
                    models.CharField(
                        choices=[
                            ("instance_belong", "实例集群归属"),
                            ("replicate_role", "数据同步实例角色"),
                            ("cluster_topo", "集群结构"),
                        ],
                        default="",
                        help_text="元数据检查子项",
                        max_length=64,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ChecksumCheckReport",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("creator", models.CharField(max_length=64, verbose_name="创建人")),
                ("create_at", models.DateTimeField(auto_now_add=True, verbose_name="创建时间")),
                ("updater", models.CharField(max_length=64, verbose_name="修改人")),
                ("update_at", models.DateTimeField(auto_now=True, verbose_name="更新时间")),
                ("bk_biz_id", models.IntegerField(default=0, help_text="业务的 cmdb id")),
                ("bk_cloud_id", models.IntegerField(default=0, help_text="云区域 id")),
                ("status", models.BooleanField(default=True, help_text="巡检结果状态, 默认正常")),
                ("msg", models.TextField(default="", help_text="备注信息")),
                ("fail_slaves", models.IntegerField(default=0, help_text="失败的备库实例")),
                ("cluster", models.CharField(default="", max_length=255)),
                (
                    "cluster_type",
                    models.CharField(
                        choices=[
                            ("tendbsingle", "tendbsingle"),
                            ("tendbha", "tendbha"),
                            ("tendbcluster", "tendbcluster"),
                        ],
                        default="",
                        max_length=64,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ChecksumInstance",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("creator", models.CharField(max_length=64, verbose_name="创建人")),
                ("create_at", models.DateTimeField(auto_now_add=True, verbose_name="创建时间")),
                ("updater", models.CharField(max_length=64, verbose_name="修改人")),
                ("update_at", models.DateTimeField(auto_now=True, verbose_name="更新时间")),
                ("ip", models.CharField(max_length=64, verbose_name="slave部署机器ip")),
                ("port", models.CharField(max_length=64, verbose_name="slave部署机器port")),
                ("master_ip", models.CharField(max_length=64, verbose_name="master部署机器ip")),
                ("master_port", models.CharField(max_length=64, verbose_name="master部署机器port")),
                ("details", models.JSONField(default=dict, verbose_name="不一致库表详情")),
                (
                    "report",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="db_report.checksumcheckreport"),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
    ]
