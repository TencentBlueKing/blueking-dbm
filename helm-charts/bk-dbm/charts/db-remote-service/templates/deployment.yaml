apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "db-remote-service.fullname" . }}
  labels:
    {{- include "db-remote-service.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "db-remote-service.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "db-remote-service.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "db-remote-service.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      # volumes:
      #   -
      #     name: config-volume
      #     configMap:
      #       name:  {{ include "db-remote-service.fullname" . }}
      #       items:
      #         -
      #           key: logger.yaml
      #           mode: 420
      #           path: path/to/logger.yaml
      #         -
      #           key: config.yaml
      #           mode: 420
      #           path: path/to/config.yaml
      #       defaultMode: 272
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.global.imageRegistry | default .Values.image.registry }}/{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 80
              protocol: TCP    
          env:
            {{- range $key, $val := .Values.envs }}
          - name: {{ $key }}
            value: {{ quote $val }}
            {{- end }}
          livenessProbe:
            httpGet:
              path: /ping
              port: http
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds | default 5}}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds | default 30}}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds | default 5}}
            successThreshold: {{ .Values.livenessProbe.successThreshold | default 1}}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold | default 1}}
          readinessProbe:
            httpGet:
              path: /ping
              port: http
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds | default 5}}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds | default 30}}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds | default 5}}
            successThreshold: {{ .Values.livenessProbe.successThreshold | default 1}}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold | default 1}}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          # volumeMounts:
          #   -
          #     name: config-volume
          #     subPath: path/to/logger.yaml
          #     mountPath: /conf/logger.yaml
          #   -
          #     name: config-volume
          #     subPath: path/to/config.yaml
          #     mountPath: /conf/config.yaml
      # 注意，如果部署 drs 的 node 有变更，需要对所有已部署的 DB 刷新权限
      nodeSelector:
        bk-dbm: db-remote-service
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
